* 

```
class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
       List<List<Integer>>list=new ArrayList<>();
       List<List<Integer>>res=new ArrayList<>();
        Deque<TreeNode> deque=new LinkedList<>();
        if(root==null) return list;
        deque.addLast(root);
        while(!deque.isEmpty()){
            int length=deque.size();
            List<Integer> temp=new ArrayList<>();
            for(int i=0;i<length;i++){
                TreeNode node=deque.pollFirst();
                temp.add(node.val);
                if(node.left!=null){
                    deque.add(node.left);

                }
                if(node.right!=null){
                    deque.add(node.right);
                }
            }
            list.add(temp);
        }
       for(int i=0;i<list.size();i++){
           res.add(list.get(list.size()-1-i));
       }
       return res;

    }
}
```

